#
# This is a sample configuration. It illustrates how to separate static objects
# traffic from dynamic traffic, and how to dynamically regulate the server load.
#
# It listens on 192.168.1.10:80, and directs all requests for Host 'img' or
# URIs starting with /img or /css to a dedicated group of servers. URIs
# starting with /admin/stats deliver the stats page.
#

# The public 'www' address in the DMZ
global
        maxconn     40000
frontend public
        bind            10.0.4.247:10192
        mode            http
        timeout client  30s
        default_backend dynamic

# the application servers go here
backend dynamic
        mode            http
        option          http-buffer-request
        balance         body_param_pattern {.*\"user\"\s*:\s*{\s*.*\"id\"\s*:\s\"([a-fA-F0-9\-]*)\".*}
        balance         body_param_pattern {.*\"device\"\s*:\s*{\s*.*\"nex_ifa\"\s*:\s*\"([a-fA-F0-9\-]*)\".*}
        hash-type       consistent crc16
        http-request    set-log-level debug 
        timeout connect 5s
        timeout server  30s
        timeout queue   200s
        server          dynsrv1 127.0.0.1:10101 slots 0-3000
        server          dynsrv2 127.0.0.1:10102 slots 3001-6000
        server          dynsrv3 127.0.0.1:10103 slots 6001-9000
        server          dynsrv4 127.0.0.1:10104 slots 9001-12000
        server          dynsrv5 127.0.0.1:10201 slots 12001-16000
        server          dynsrv6 127.0.0.1:10202 slots 16001-16383
